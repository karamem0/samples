/*
 * This file is automatically generated; any changes will be lost.
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Caching;
using Beef.Entities;
using Beef.Events;
using Karamem0.SampleApplication.Business.Data;
using Karamem0.SampleApplication.Business.Entities;
using RefDataNamespace = Karamem0.SampleApplication.Business.Entities;

namespace Karamem0.SampleApplication.Business.DataSvc
{
    /// <summary>
    /// Provides the <see cref="Product"/> data repository services.
    /// </summary>
    public partial class ProductDataSvc : IProductDataSvc
    {
        private readonly IProductData _data;
        private readonly IEventPublisher _evtPub;
        private readonly IRequestCache _cache;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDataSvc"/> class.
        /// </summary>
        /// <param name="data">The <see cref="IProductData"/>.</param>
        /// <param name="evtPub">The <see cref="IEventPublisher"/>.</param>
        /// <param name="cache">The <see cref="IRequestCache"/>.</param>
        public ProductDataSvc(IProductData data, IEventPublisher evtPub, IRequestCache cache)
            { _data = Check.NotNull(data, nameof(data)); _evtPub = Check.NotNull(evtPub, nameof(evtPub)); _cache = Check.NotNull(cache, nameof(cache)); ProductDataSvcCtor(); }

        partial void ProductDataSvcCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="ProductCollectionResult"/>.</returns>
        public Task<ProductCollectionResult> GetAllAsync() => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __result = await _data.GetAllAsync().ConfigureAwait(false);
            return __result;
        });

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The selected <see cref="Product"/> where found.</returns>
        public Task<Product?> GetAsync(Guid productId) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __key = new UniqueKey(productId);
            if (_cache.TryGetValue(__key, out Product? __val))
                return __val;

            var __result = await _data.GetAsync(productId).ConfigureAwait(false);
            return _cache.SetAndReturnValue(__key, __result);
        });

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        public Task DeleteAsync(Guid productId) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            await _data.DeleteAsync(productId).ConfigureAwait(false);
            await _evtPub.PublishValue(new Product { ProductId = productId }, $"SampleApplication.Product.{_evtPub.FormatKey(productId)}", "Delete", productId).SendAsync().ConfigureAwait(false);
            _cache.Remove<Product>(new UniqueKey(productId));
        });

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The created <see cref="Product"/>.</returns>
        public Task<Product> CreateAsync(Product value) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __result = await _data.CreateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
            await _evtPub.PublishValue(__result, $"SampleApplication.Product.{_evtPub.FormatKey(__result)}", "Create").SendAsync().ConfigureAwait(false);
            return _cache.SetAndReturnValue(__result);
        });

        /// <summary>
        /// Updates an existing <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The updated <see cref="Product"/>.</returns>
        public Task<Product> UpdateAsync(Product value) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __result = await _data.UpdateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
            await _evtPub.PublishValue(__result, $"SampleApplication.Product.{_evtPub.FormatKey(__result)}", "Update").SendAsync().ConfigureAwait(false);
            return _cache.SetAndReturnValue(__result);
        });
    }
}

#pragma warning restore
#nullable restore
