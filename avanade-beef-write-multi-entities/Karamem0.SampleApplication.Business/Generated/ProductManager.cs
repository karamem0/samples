/*
 * This file is automatically generated; any changes will be lost.
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using Karamem0.SampleApplication.Business.Entities;
using Karamem0.SampleApplication.Business.DataSvc;
using Karamem0.SampleApplication.Business.Validation;
using RefDataNamespace = Karamem0.SampleApplication.Business.Entities;

namespace Karamem0.SampleApplication.Business
{
    /// <summary>
    /// Provides the <see cref="Product"/> business functionality.
    /// </summary>
    public partial class ProductManager : IProductManager
    {
        private readonly IProductDataSvc _dataService;
        private readonly IProductLogDataSvc _logDataService;
        private readonly IGuidIdentifierGenerator _guidIdentifierGenerator;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IProductDataSvc"/>.</param>
        /// <param name="logDataService">The <see cref="IProductLogDataSvc"/>.</param>
        /// <param name="guidIdentifierGenerator">The <see cref="IGuidIdentifierGenerator"/>.</param>
        public ProductManager(IProductDataSvc dataService, IProductLogDataSvc logDataService, IGuidIdentifierGenerator guidIdentifierGenerator)
        {
            _dataService = Check.NotNull(dataService, nameof(dataService));
            _logDataService = Check.NotNull(logDataService, nameof(logDataService));
            _guidIdentifierGenerator = Check.NotNull(guidIdentifierGenerator, nameof(guidIdentifierGenerator));
            ProductManagerCtor();
        }

        partial void ProductManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="ProductCollectionResult"/>.</returns>
        public Task<ProductCollectionResult> GetAllAsync() => ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            return Cleaner.Clean(await _dataService.GetAllAsync().ConfigureAwait(false));
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The selected <see cref="Product"/> where found.</returns>
        public Task<Product?> GetAsync(Guid productId) => ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            Cleaner.CleanUp(productId);
            await productId.Validate(nameof(productId)).Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.GetAsync(productId).ConfigureAwait(false));
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        public Task DeleteAsync(Guid productId) => ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            Cleaner.CleanUp(productId);
            await productId.Validate(nameof(productId)).Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);
            await _dataService.DeleteAsync(productId).ConfigureAwait(false);
        }, BusinessInvokerArgs.Delete);

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The created <see cref="Product"/>.</returns>
        public Task<Product> CreateAsync(Product value) => ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            value.ProductId = await _guidIdentifierGenerator.GenerateIdentifierAsync<Product>().ConfigureAwait(false);
            return Cleaner.Clean(await CreateOnImplementationAsync(value).ConfigureAwait(false));
        }, BusinessInvokerArgs.Create);

        /// <summary>
        /// Updates an existing <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The updated <see cref="Product"/>.</returns>
        public Task<Product> UpdateAsync(Product value, Guid productId) => ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            value.ProductId = productId;
            return Cleaner.Clean(await UpdateOnImplementationAsync(value, productId).ConfigureAwait(false));
        }, BusinessInvokerArgs.Update);
    }
}

#pragma warning restore
#nullable restore
