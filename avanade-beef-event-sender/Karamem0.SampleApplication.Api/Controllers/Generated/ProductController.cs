/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Karamem0.SampleApplication.Api.Controllers
{
    /// <summary>
    /// Provides the <see cref="Product"/> Web API functionality.
    /// </summary>
    [Route("products")]
    [Produces(System.Net.Mime.MediaTypeNames.Application.Json)]
    public partial class ProductController : ControllerBase
    {
        private readonly WebApi _webApi;
        private readonly IProductManager _manager;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductController"/> class.
        /// </summary>
        /// <param name="webApi">The <see cref="WebApi"/>.</param>
        /// <param name="manager">The <see cref="IProductManager"/>.</param>
        public ProductController(WebApi webApi, IProductManager manager)
            { _webApi = webApi ?? throw new ArgumentNullException(nameof(webApi)); _manager = manager ?? throw new ArgumentNullException(nameof(manager)); ProductControllerCtor(); }

        partial void ProductControllerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="ProductCollection"/></returns>
        [HttpGet("")]
        [ProducesResponseType(typeof(Common.Entities.ProductCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public Task<IActionResult> GetAll() =>
            _webApi.GetAsync<ProductCollectionResult>(Request, p => _manager.GetAllAsync(), alternateStatusCode: HttpStatusCode.NoContent);

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The selected <see cref="Product"/> where found.</returns>
        [HttpGet("{productId}")]
        [ProducesResponseType(typeof(Common.Entities.Product), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public Task<IActionResult> Get(Guid productId) =>
            _webApi.GetAsync<Product?>(Request, p => _manager.GetAsync(productId));

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <returns>The created <see cref="Product"/>.</returns>
        [HttpPost("")]
        [AcceptsBody(typeof(Common.Entities.Product))]
        [ProducesResponseType(typeof(Common.Entities.Product), (int)HttpStatusCode.Created)]
        public Task<IActionResult> Create() =>
            _webApi.PostAsync<Product, Product>(Request, p => _manager.CreateAsync(p.Value!), statusCode: HttpStatusCode.Created, locationUri: r => new Uri($"/products/{r.ProductId}", UriKind.Relative));

        /// <summary>
        /// Updates an existing <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The updated <see cref="Product"/>.</returns>
        [HttpPut("{productId}")]
        [AcceptsBody(typeof(Common.Entities.Product))]
        [ProducesResponseType(typeof(Common.Entities.Product), (int)HttpStatusCode.OK)]
        public Task<IActionResult> Update(Guid productId) =>
            _webApi.PutAsync<Product, Product>(Request, p => _manager.UpdateAsync(p.Value!, productId));

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        [HttpDelete("{productId}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public Task<IActionResult> Delete(Guid productId) =>
            _webApi.DeleteAsync(Request, p => _manager.DeleteAsync(productId));
    }
}

#pragma warning restore
#nullable restore