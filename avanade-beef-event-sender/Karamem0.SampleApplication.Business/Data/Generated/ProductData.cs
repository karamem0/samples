/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Karamem0.SampleApplication.Business.Data
{
    /// <summary>
    /// Provides the <see cref="Product"/> data access.
    /// </summary>
    public partial class ProductData : IProductData
    {
        private readonly IEfDb _ef;
        private Func<IQueryable<EfModel.Product>, IQueryable<EfModel.Product>>? _getAllOnQuery;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductData"/> class.
        /// </summary>
        /// <param name="ef">The <see cref="IEfDb"/>.</param>
        public ProductData(IEfDb ef)
            { _ef = ef ?? throw new ArgumentNullException(nameof(ef)); ProductDataCtor(); }

        partial void ProductDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="ProductCollectionResult"/>.</returns>
        public Task<ProductCollectionResult> GetAllAsync()
        {
            return _ef.Query<Product, EfModel.Product>(q => _getAllOnQuery?.Invoke(q) ?? q).SelectResultAsync<ProductCollectionResult, ProductCollection>();
        }

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The selected <see cref="Product"/> where found.</returns>
        public Task<Product?> GetAsync(Guid productId)
        {
            return _ef.GetAsync<Product, EfModel.Product>(productId);
        }

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The created <see cref="Product"/>.</returns>
        public Task<Product> CreateAsync(Product value)
        {
            return _ef.CreateAsync<Product, EfModel.Product>(value ?? throw new ArgumentNullException(nameof(value)));
        }

        /// <summary>
        /// Updates an existing <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The updated <see cref="Product"/>.</returns>
        public Task<Product> UpdateAsync(Product value)
        {
            return _ef.UpdateAsync<Product, EfModel.Product>(value ?? throw new ArgumentNullException(nameof(value)));
        }

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        public Task DeleteAsync(Guid productId)
        {
            return _ef.DeleteAsync<Product, EfModel.Product>(productId);
        }

        /// <summary>
        /// Provides the <see cref="Product"/> to Entity Framework <see cref="EfModel.Product"/> mapping.
        /// </summary>
        public partial class EntityToModelEfMapper : Mapper<Product, EfModel.Product>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EntityToModelEfMapper"/> class.
            /// </summary>
            public EntityToModelEfMapper()
            {
                Map((s, d) => d.ProductId = s.ProductId, OperationTypes.Any, s => s.ProductId == default, d => d.ProductId = default);
                Map((s, d) => d.ProductName = s.ProductName, OperationTypes.Any, s => s.ProductName == default, d => d.ProductName = default);
                Map((s, d) => d.Price = s.Price, OperationTypes.Any, s => s.Price == default, d => d.Price = default);
                Flatten(s => s.ChangeLog, OperationTypes.Any, s => s.ChangeLog == default);
                EntityToModelEfMapperCtor();
            }

            partial void EntityToModelEfMapperCtor(); // Enables the constructor to be extended.

            /// <inheritdoc/>
            protected override void OnRegister(Mapper<Product, EfModel.Product> mapper) => mapper.Owner.Register(new Mapper<ChangeLogEx, EfModel.Product>()
                .Map((s, d) => d.CreatedBy = s.CreatedBy, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.CreatedDate = s.CreatedDate, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.UpdatedBy = s.UpdatedBy, OperationTypes.AnyExceptCreate)
                .Map((s, d) => d.UpdatedDate = s.UpdatedDate, OperationTypes.AnyExceptCreate));
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="EfModel.Product"/> to <see cref="Product"/> mapping.
        /// </summary>
        public partial class ModelToEntityEfMapper : Mapper<EfModel.Product, Product>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityEfMapper"/> class.
            /// </summary>
            public ModelToEntityEfMapper()
            {
                Map((s, d) => d.ProductId = (Guid)s.ProductId, OperationTypes.Any, s => s.ProductId == default, d => d.ProductId = default);
                Map((s, d) => d.ProductName = (string?)s.ProductName, OperationTypes.Any, s => s.ProductName == default, d => d.ProductName = default);
                Map((s, d) => d.Price = (decimal)s.Price, OperationTypes.Any, s => s.Price == default, d => d.Price = default);
                Expand<ChangeLogEx>((d, v) => d.ChangeLog = v, OperationTypes.Any, d => d.ChangeLog = default);
                ModelToEntityEfMapperCtor();
            }

            partial void ModelToEntityEfMapperCtor(); // Enables the constructor to be extended.

            /// <inheritdoc/>
            protected override void OnRegister(Mapper<EfModel.Product, Product> mapper) => mapper.Owner.Register(new Mapper<EfModel.Product, ChangeLogEx>()
                .Map((s, d) => d.CreatedBy = s.CreatedBy, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.CreatedDate = s.CreatedDate, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.UpdatedBy = s.UpdatedBy, OperationTypes.AnyExceptCreate)
                .Map((s, d) => d.UpdatedDate = s.UpdatedDate, OperationTypes.AnyExceptCreate));
        }
    }
}

#pragma warning restore
#nullable restore