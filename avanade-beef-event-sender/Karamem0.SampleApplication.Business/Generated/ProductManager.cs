/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Karamem0.SampleApplication.Business
{
    /// <summary>
    /// Provides the <see cref="Product"/> business functionality.
    /// </summary>
    public partial class ProductManager : IProductManager
    {
        private readonly IProductDataSvc _dataService;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IProductDataSvc"/>.</param>
        public ProductManager(IProductDataSvc dataService)
            { _dataService = dataService ?? throw new ArgumentNullException(nameof(dataService)); ProductManagerCtor(); }

        partial void ProductManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="ProductCollectionResult"/>.</returns>
        public Task<ProductCollectionResult> GetAllAsync() => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            return await _dataService.GetAllAsync().ConfigureAwait(false);
        }, InvokerArgs.Read);

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The selected <see cref="Product"/> where found.</returns>
        public Task<Product?> GetAsync(Guid productId) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await productId.Validate(nameof(productId)).Mandatory().ValidateAsync(true).ConfigureAwait(false);
            return await _dataService.GetAsync(productId).ConfigureAwait(false);
        }, InvokerArgs.Read);

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The created <see cref="Product"/>.</returns>
        public Task<Product> CreateAsync(Product value) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await value.Validate().Mandatory().Entity().With<ProductValidator>().ValidateAsync(true).ConfigureAwait(false);
            return await _dataService.CreateAsync(value).ConfigureAwait(false);
        }, InvokerArgs.Create);

        /// <summary>
        /// Updates an existing <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The updated <see cref="Product"/>.</returns>
        public Task<Product> UpdateAsync(Product value, Guid productId) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            value.EnsureValue().ProductId = productId;
            await value.Validate().Entity().With<ProductValidator>().ValidateAsync(true).ConfigureAwait(false);
            return await _dataService.UpdateAsync(value).ConfigureAwait(false);
        }, InvokerArgs.Update);

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        public Task DeleteAsync(Guid productId) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await productId.Validate(nameof(productId)).Mandatory().ValidateAsync(true).ConfigureAwait(false);
            await _dataService.DeleteAsync(productId).ConfigureAwait(false);
        }, InvokerArgs.Delete);
    }
}

#pragma warning restore
#nullable restore