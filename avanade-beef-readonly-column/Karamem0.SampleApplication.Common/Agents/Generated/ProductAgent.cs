/*
 * This file is automatically generated; any changes will be lost.
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Beef.Entities;
using Beef.WebApi;
using Newtonsoft.Json.Linq;
using Karamem0.SampleApplication.Common.Entities;
using RefDataNamespace = Karamem0.SampleApplication.Common.Entities;

namespace Karamem0.SampleApplication.Common.Agents
{
    /// <summary>
    /// Defines the <see cref="Product"/> Web API agent.
    /// </summary>
    public partial interface IProductAgent
    {
        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        Task<WebApiAgentResult<ProductCollectionResult>> GetAllAsync(WebApiRequestOptions? requestOptions = null);

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        Task<WebApiAgentResult<Product?>> GetAsync(Guid productId, WebApiRequestOptions? requestOptions = null);

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        Task<WebApiAgentResult<Product>> CreateAsync(Product value, WebApiRequestOptions? requestOptions = null);

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        Task<WebApiAgentResult> DeleteAsync(Guid productId, WebApiRequestOptions? requestOptions = null);

        /// <summary>
        /// Updates an existing <see cref="ProductPrice"/>.
        /// </summary>
        /// <param name="value">The <see cref="ProductPrice"/>.</param>
        /// <param name="productId">The Product Id.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        Task<WebApiAgentResult<Product>> UpdatePriceAsync(ProductPrice value, Guid productId, WebApiRequestOptions? requestOptions = null);
    }

    /// <summary>
    /// Provides the <see cref="Product"/> Web API agent.
    /// </summary>
    public partial class ProductAgent : WebApiAgentBase, IProductAgent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAgent"/> class.
        /// </summary>
        /// <param name="args">The <see cref="ISampleApplicationWebApiAgentArgs"/>.</param>
        public ProductAgent(ISampleApplicationWebApiAgentArgs args) : base(args) { }

        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<ProductCollectionResult>> GetAllAsync(WebApiRequestOptions? requestOptions = null) =>
            GetCollectionResultAsync<ProductCollectionResult, ProductCollection, Product>("products", requestOptions: requestOptions,
                args: Array.Empty<WebApiArg>());

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<Product?>> GetAsync(Guid productId, WebApiRequestOptions? requestOptions = null) =>
            GetAsync<Product?>("products/{productId}", requestOptions: requestOptions,
                args: new WebApiArg[] { new WebApiArg<Guid>("productId", productId) });

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<Product>> CreateAsync(Product value, WebApiRequestOptions? requestOptions = null) =>
            PostAsync<Product>("products", Beef.Check.NotNull(value, nameof(value)), requestOptions: requestOptions,
                args: Array.Empty<WebApiArg>());

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult> DeleteAsync(Guid productId, WebApiRequestOptions? requestOptions = null) =>
            DeleteAsync("products/{productId}", requestOptions: requestOptions,
                args: new WebApiArg[] { new WebApiArg<Guid>("productId", productId) });

        /// <summary>
        /// Updates an existing <see cref="ProductPrice"/>.
        /// </summary>
        /// <param name="value">The <see cref="ProductPrice"/>.</param>
        /// <param name="productId">The Product Id.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<Product>> UpdatePriceAsync(ProductPrice value, Guid productId, WebApiRequestOptions? requestOptions = null) =>
            PutAsync<Product>("products/{productId}/price", Beef.Check.NotNull(value, nameof(value)), requestOptions: requestOptions,
                args: new WebApiArg[] { new WebApiArg<Guid>("productId", productId) });
    }
}

#pragma warning restore
#nullable restore
