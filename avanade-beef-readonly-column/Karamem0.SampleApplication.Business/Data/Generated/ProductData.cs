/*
 * This file is automatically generated; any changes will be lost.
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Data.Database;
using Beef.Data.EntityFrameworkCore;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using Karamem0.SampleApplication.Business.Entities;
using RefDataNamespace = Karamem0.SampleApplication.Business.Entities;

namespace Karamem0.SampleApplication.Business.Data
{
    /// <summary>
    /// Provides the <see cref="Product"/> data access.
    /// </summary>
    public partial class ProductData : IProductData
    {
        private readonly IEfDb _ef;
        private readonly AutoMapper.IMapper _mapper;

        private Func<IQueryable<EfModel.Product>, EfDbArgs, IQueryable<EfModel.Product>>? _getAllOnQuery;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductData"/> class.
        /// </summary>
        /// <param name="ef">The <see cref="IEfDb"/>.</param>
        /// <param name="mapper">The <see cref="AutoMapper.IMapper"/>.</param>
        public ProductData(IEfDb ef, AutoMapper.IMapper mapper)
            { _ef = Check.NotNull(ef, nameof(ef)); _mapper = Check.NotNull(mapper, nameof(mapper)); ProductDataCtor(); }

        partial void ProductDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the <see cref="ProductCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="ProductCollectionResult"/>.</returns>
        public Task<ProductCollectionResult> GetAllAsync() => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            ProductCollectionResult __result = new ProductCollectionResult();
            var __dataArgs = EfDbArgs.Create(_mapper);
            __result.Result = _ef.Query<Product, EfModel.Product>(__dataArgs, q => _getAllOnQuery?.Invoke(q, __dataArgs) ?? q).SelectQuery<ProductCollection>();
            return await Task.FromResult(__result).ConfigureAwait(false);
        });

        /// <summary>
        /// Gets the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        /// <returns>The selected <see cref="Product"/> where found.</returns>
        public Task<Product?> GetAsync(Guid productId) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = EfDbArgs.Create(_mapper);
            return await _ef.GetAsync<Product, EfModel.Product>(__dataArgs, productId).ConfigureAwait(false);
        });

        /// <summary>
        /// Creates a new <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The created <see cref="Product"/>.</returns>
        public Task<Product> CreateAsync(Product value) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = EfDbArgs.Create(_mapper);
            return await _ef.CreateAsync<Product, EfModel.Product>(__dataArgs, Check.NotNull(value, nameof(value))).ConfigureAwait(false);
        });

        /// <summary>
        /// Deletes the specified <see cref="Product"/>.
        /// </summary>
        /// <param name="productId">The Product Id.</param>
        public Task DeleteAsync(Guid productId) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = EfDbArgs.Create(_mapper);
            await _ef.DeleteAsync<Product, EfModel.Product>(__dataArgs, productId).ConfigureAwait(false);
        });

        /// <summary>
        /// Updates an existing <see cref="Product"/>.
        /// </summary>
        /// <param name="value">The <see cref="Product"/>.</param>
        /// <returns>The updated <see cref="Product"/>.</returns>
        public Task<Product> UpdateAsync(Product value) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = EfDbArgs.Create(_mapper);
            return await _ef.UpdateAsync<Product, EfModel.Product>(__dataArgs, Check.NotNull(value, nameof(value))).ConfigureAwait(false);
        });

        /// <summary>
        /// Provides the <see cref="Product"/> and Entity Framework <see cref="EfModel.Product"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class EfMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EfMapperProfile"/> class.
            /// </summary>
            public EfMapperProfile()
            {
                var s2d = CreateMap<Product, EfModel.Product>();
                s2d.ForMember(d => d.ProductId, o => o.MapFrom(s => s.ProductId));
                s2d.ForMember(d => d.ProductName, o => o.MapFrom(s => s.ProductName));
                s2d.ForMember(d => d.Price, o => o.MapFrom(s => s.Price));
                s2d.ForMember(d => d.CreatedBy, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(s => s.ChangeLog.CreatedBy));
                s2d.ForMember(d => d.CreatedDate, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(s => s.ChangeLog.CreatedDate));
                s2d.ForMember(d => d.UpdatedBy, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(s => s.ChangeLog.UpdatedBy));
                s2d.ForMember(d => d.UpdatedDate, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(s => s.ChangeLog.UpdatedDate));

                var d2s = CreateMap<EfModel.Product, Product>();
                d2s.ForMember(s => s.ProductId, o => o.MapFrom(d => d.ProductId));
                d2s.ForMember(s => s.ProductName, o => o.MapFrom(d => d.ProductName));
                d2s.ForMember(s => s.Price, o => o.MapFrom(d => d.Price));
                d2s.ForPath(s => s.ChangeLog.CreatedBy, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(d => d.CreatedBy));
                d2s.ForPath(s => s.ChangeLog.CreatedDate, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(d => d.CreatedDate));
                d2s.ForPath(s => s.ChangeLog.UpdatedBy, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(d => d.UpdatedBy));
                d2s.ForPath(s => s.ChangeLog.UpdatedDate, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(d => d.UpdatedDate));

                EfMapperProfileCtor(s2d, d2s);
            }

            partial void EfMapperProfileCtor(AutoMapper.IMappingExpression<Product, EfModel.Product> s2d, AutoMapper.IMappingExpression<EfModel.Product, Product> d2s); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
